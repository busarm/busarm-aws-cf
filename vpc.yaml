AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: public and private subnets in 2 AZ'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB
      - SubnetNotation
      - PublicSubnetAClassC
      - PrivateSubnetAClassC
      - PublicSubnetBClassC
      - PrivateSubnetBClassC
    - Label:
        default: 'Global Tags'
      Parameters:
      - ENV
      - SYS
Parameters:
  ClassB:
    Description: 'Class B of VPC (172.XXX.0.0/16). Must not be used by another VPC'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  SubnetNotation:
    Description: 'CIDR Notation for Subnets (172.0.0.0/XXX)'
    Type: Number
    Default: 28
    ConstraintDescription: 'Must be in the range [25-32] (within) VPC Notation which is greater 24'
    MinValue: 17
    MaxValue: 32
  PublicSubnetAClassC:
    Description: 'Class C of VPC AZ (A) Public Subnet (172.0.XXX.0/ยง{SubnetNotation}). Must not be used in another subnet.'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255] (within) VPC Notation which is greater 24'
    MinValue: 0
    MaxValue: 255
  PrivateSubnetAClassC:
    Description: 'Class C of VPC AZ (A) Private Subnet (172.0.XXX.0/ยง{SubnetNotation}). Must not be used in another subnet.'
    Type: Number
    Default: 16
    ConstraintDescription: 'Must be in the range [0-255] (within) VPC Notation which is greater 24'
    MinValue: 0
    MaxValue: 255
  PublicSubnetBClassC:
    Description: 'Class C of VPC AZ (B) Public Subnet (172.0.XXX.0/ยง{SubnetNotation}). Must not be used in another subnet.'
    Type: Number
    Default: 32
    ConstraintDescription: 'Must be in the range [0-255] (within) VPC Notation which is greater 24'
    MinValue: 0
    MaxValue: 255
  PrivateSubnetBClassC:
    Description: 'Class C of VPC AZ (B) Private Subnet (172.0.XXX.0/ยง{SubnetNotation}). Must not be used in another subnet.'
    Type: Number
    Default: 48
    ConstraintDescription: 'Must be in the range [0-255] (within) VPC Notation which is greater 24'
    MinValue: 0
    MaxValue: 255

  ENV:
    Description: 'Specify Environment to deploy Resource (dev,staging,prod)'
    Type: String
    Default: 'dev'
    AllowedValues:
    - 'dev'
    - 'staging'
    - 'prod'
  SYS:
    Description: 'Specify type System the resource is associated with this Resource (backend,frontend,both)'
    Type: String
    AllowedValues:
    - 'backend'
    - 'frontend'
    - 'both'
  
Resources:

  #VPC 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '172.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: !Sub '${AWS::StackName}-172.${ClassB}.0.0/16'
  VPCCidrBlock:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC
  
  # VPC - EgressOnlyInternetGateway
  EgressOnlyInternetGateway:
    Type: 'AWS::EC2::EgressOnlyInternetGateway'
    Properties:
      VpcId: !Ref VPC
    
  # VPC - InternetGateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: !Sub '${AWS::StackName}-InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #Subnets
  SubnetAPublic: # A - Public
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '172.${ClassB}.${PublicSubnetAClassC}.0/${SubnetNotation}'
      Ipv6CidrBlock: !Select [0, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 4, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'A - Public Subnet'
      - Key: Reach
        Value: public
  SubnetAPrivate: # A - Private
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Sub '172.${ClassB}.${PrivateSubnetAClassC}.0/${SubnetNotation}'
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 4, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'A - Private Subnet'
      - Key: Reach
        Value: private
  
  SubnetBPublic: # B - Public
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '172.${ClassB}.${PublicSubnetBClassC}.0/${SubnetNotation}'
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 4, 64]]
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'B - Public Subnet'
      - Key: Reach
        Value: public
  SubnetBPrivate: # B - Private
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AssignIpv6AddressOnCreation: false
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Sub '172.${ClassB}.${PrivateSubnetBClassC}.0/${SubnetNotation}'
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'VPC.Ipv6CidrBlocks'], 4, 64]]
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'B - Private Subnet'
      - Key: Reach
        Value: private

  # Route Table
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public Route Table'
  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private Route Table'

  # Route Table A - Subnet Association
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTablePrivate

  # Route Table B - Subnet Association
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTablePrivate

  # Route Table - Public Routes
  RouteTablePublicInternetRoute: 
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTablePublicInternetRouteIPv6:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationIpv6CidrBlock: '::/0'
      GatewayId: !Ref InternetGateway
  # Route Table - Private Routes
  RouteTablePrivateInternetRouteIPv6: # Only handle IPV6 here. Deploy NatGateway or NatInstance in Zone (A) to handle IPV4
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationIpv6CidrBlock: '::/0'
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  # ACL - A   
  NetworkAclAPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'A - Public ACL'
  NetworkAclAPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'A - Private ACL'
  
  # ACL - B
  NetworkAclBPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'B - Public ACL'
  NetworkAclBPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      - Key: Name
        Value: 'B - Private ACL'

  # ACL A - Subnet Association
  SubnetNetworkAclAssociationAPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      NetworkAclId: !Ref NetworkAclAPublic
  SubnetNetworkAclAssociationAPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      NetworkAclId: !Ref NetworkAclAPrivate
      

  # ACL B - Subnet Association
  SubnetNetworkAclAssociationBPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      NetworkAclId: !Ref NetworkAclBPublic
  SubnetNetworkAclAssociationBPrivate:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      NetworkAclId: !Ref NetworkAclBPrivate

  # ACL A - Public Network Entry
  NetworkAclAEntryInPublicAllowAll: # IN
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclAEntryInPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'

  NetworkAclAEntryOutPublicAllowAll: # OUT
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclAEntryOutPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'

  # ACL A - Private Network Entry
  NetworkAclAEntryInPrivateAllowAll: # IN
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclAEntryInPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'

  NetworkAclAEntryOutPrivateAllowAll: # OUT
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclAEntryOutPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclAPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'


  # ACL B - Public Network Entry
  NetworkAclBEntryInPublicAllowAll: # IN
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclBEntryInPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'

  NetworkAclBEntryOutPublicAllowAll: # OUT
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPublic
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclBEntryOutPublicAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'

  # ACL B - Private Network Entry
  NetworkAclBEntryInPrivateAllowAll: # IN
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclBEntryInPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      Ipv6CidrBlock: '::/0'


  NetworkAclBEntryOutPrivateAllowAll: # OUT
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPrivate
      RuleNumber: 98
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  NetworkAclBEntryOutPrivateAllowAllIPv6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclBPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      Ipv6CidrBlock: '::/0'


Outputs:
  TemplateID:
    Description: 'AWS Cloud Formation template id'
    Value: 'vpc'
  TemplateVersion:
    Description: 'AWS Cloud Formation template version.'
    Value: '1.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'

  AZs:
    Description: 'AZs'
    Value: 1 # Increase to add more AZs
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'

  CidrBlock:
    Description: 'The set of IP addresses for the VPC'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  CidrBlockIPv6:
    Description: 'The set of IPv6 addresses for the VPC'
    Value: !Select [0, !GetAtt 'VPC.Ipv6CidrBlocks']
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlockIPv6'

  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  VPCDefaultSecurityGroup:
    Description: 'VPC Security Group'
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'

  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref SubnetAPublic, !Ref SubnetBPublic]] # TODO Add other public subnets to [!Ref SubnetAPublic, .....] if more AZs added 
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref SubnetAPrivate, !Ref SubnetBPrivate]] # TODO Add other private subnets to [!Ref SubnetAPrivate, .....] if more AZs added 
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'

  RouteTablePrivate:
    Description: 'Route table private.'
    Value: !Ref RouteTablePrivate
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePrivate'
  RouteTablePublic:
    Description: 'Route table public.'
    Value: !Ref RouteTablePublic
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablePublic'

  SubnetAPublic:
    Description: 'Subnet A public.'
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  SubnetAPrivate:
    Description: 'Subnet A private.'
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'

  SubnetBPublic:
    Description: 'Subnet B public.'
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  SubnetBPrivate:
    Description: 'Subnet B private.'
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'