AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC: NAT Instance in an Auto Scaling Group'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentSSHBastionStack
      - ParentAlertStack
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - InstanceType
      - AutoScaleMinInstance
      - AutoScaleMaxInstance
      - AutoScaleScheduleStart
      - AutoScaleScheduleStop
      - LogsRetentionInDays
    - Label:
        default: 'EC2 Security'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
      - SystemsManagerAccess
      - ManagedPolicyArns
    - Label:
        default: 'New Relic'
      Parameters:
      - NewRelicLicenseKey
    - Label:
        default: 'Global Tags'
      Parameters:
      - ENV
      - SYS
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc.yaml template.'
    Type: String
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on pxlr-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on alert.yaml template.'
    Type: String
    Default: ''

  InstanceType:
    Description: 'Instance type of the SSH bastion host/instance.'
    Type: String
    Default: 't3.nano'
  AutoScaleMinInstance:
    Description: 'Minimum number of ec2 instances in auto scaling group'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-10]'
    MinValue: 1
    MaxValue: 10
  AutoScaleMaxInstance:
    Description: 'Maximum number of ec2 instances in auto scaling group'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be in the range [1-10]'
    MinValue: 1
    MaxValue: 10
  AutoScaleScheduleStart:
    Description: 'Optional cron scheduler for when to start instances in ASG. e.g "0 8 * * MON-FRI" 8 am UTC every week day'
    Type: String
    Default: ''
  AutoScaleScheduleStop:
    Description: 'Optional cron scheduler for when to stop instances in ASG. e.g "0 22 * * *" 10 pm UTC every day'
    Type: String
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the SSH bastion host/instance.'
    Type: String
    Default: ''
  IAMUserSSHAccess:
    Description: 'Enable to Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  SystemsManagerAccess:
    Description: 'Enable AWS Systems Manager agent and authorization.'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  ManagedPolicyArns:
    Description: 'Optional comma-delimited list of IAM managed policy ARNs to attach to the instance''s IAM role'
    Type: String
    Default: ''

  NewRelicLicenseKey:
    Description: 'Optional New Relic License Key will install the New Relic Servers for Linux agent. This is used for monitoring'
    Type: String
    Default: ''
    NoEcho: true

  ENV:
    Description: 'Specify Environment to deploy Resource (dev,staging,prod)'
    Type: String
    Default: 'dev'
    AllowedValues:
    - 'dev'
    - 'staging'
    - 'prod'
  SYS:
    Description: 'Specify type System the resource is associated with this Resource (backend,frontend,both)'
    Type: String
    AllowedValues:
    - 'backend'
    - 'frontend'
    - 'both'

Mappings:
  RegionMap:
    'af-south-1':
      NATAMI: 'ami-00b2589b3a597efda'
    'eu-north-1':
      NATAMI: 'ami-07c7e832506fccff3'
    'ap-south-1':
      NATAMI: 'ami-00999044593c895de'
    'eu-west-3':
      NATAMI: 'ami-0c91611c0eda570b1'
    'eu-west-2':
      NATAMI: 'ami-0b591cead6116fc3d'
    'eu-south-1':
      NATAMI: 'ami-0e99be22e6f77a68e'
    'eu-west-1':
      NATAMI: 'ami-01ae0e01e7fffd105'
    'ap-northeast-2':
      NATAMI: 'ami-0ded5b0f6eeead568'
    'me-south-1':
      NATAMI: 'ami-08f7c4beae3e83c61'
    'ap-northeast-1':
      NATAMI: 'ami-03a25ad0215eba6a0'
    'sa-east-1':
      NATAMI: 'ami-09daad74353510fb1'
    'ca-central-1':
      NATAMI: 'ami-041b520d98ac275aa'
    'ap-east-1':
      NATAMI: 'ami-fd57158c'
    'ap-southeast-1':
      NATAMI: 'ami-057b90a68b985aba3'
    'ap-southeast-2':
      NATAMI: 'ami-0a9440ece633784bc'
    'eu-central-1':
      NATAMI: 'ami-0e7d350caf8ca5e8d'
    'us-east-1':
      NATAMI: 'ami-0f498e123a72a0a36'
    'us-east-2':
      NATAMI: 'ami-00b34bbb100d6cfa1'
    'us-west-1':
      NATAMI: 'ami-0567fb64a58cd3a34'
    'us-west-2':
      NATAMI: 'ami-041799070f9192726'
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSystemsManagerAccess: !Equals [!Ref SystemsManagerAccess, 'true']
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasNotSSHBastionSecurityGroup: !Equals [!Ref ParentSSHBastionStack, ''] 
  HasNewRelic: !Not [!Equals [!Ref NewRelicLicenseKey, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasManagedPolicyArns: !Not [!Equals [!Ref ManagedPolicyArns, '']]
  HasAutoScaleScheduleStart: !Not [!Equals [!Ref AutoScaleScheduleStart, '']]
  HasAutoScaleScheduleStop: !Not [!Equals [!Ref AutoScaleScheduleStop, '']]
Resources: 

  # Elastic IP for Bastion Host
  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  
  # Log Group for Bastion Host
  Logs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  
  # Security Group Configuration for Bastion Host
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIpv6: '::/0'
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIpv6: '::/0'
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
        CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
      - IpProtocol: udp
        FromPort: 123
        ToPort: 123
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlock'}
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIpv6: {'Fn::ImportValue': !Sub '${ParentVPCStack}-CidrBlockIPv6'}
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  
  # Bastion Host Security Group 
  SecurityGroupInSSHBastion:  # Allow SSH for Bastion Host only if availble
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: {'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'}

  SecurityGroupInSSHWorld: # Allow SSH for everyone if no Bastion Host avialable
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasNotSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: '0.0.0.0/0'

  # EC2 Instance Profile
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref IAMRole
  
  # IAM ROLE for Bastion Host
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns: !If [HasManagedPolicyArns, !Split [',', !Ref ManagedPolicyArns], !Ref 'AWS::NoValue'] # Integrate Managed (custom) Policy ARN
      Policies:
      - !If # Allow System Manager access if enabled on setup
        - HasSystemsManagerAccess
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              Resource: '*'
        - !Ref 'AWS::NoValue'

      - PolicyName: 'ec2'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:AssociateAddress'
            - 'ec2:ModifyInstanceAttribute'
            - 'ec2:CreateRoute'
            - 'ec2:ReplaceRoute'
            Resource:
            - '*'

      - PolicyName: logs # Allow cloud watch logging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'Logs.Arn'
  
  # SSH access for IAM Users
  IAMPolicySSHAccess:
    Type: 'AWS::IAM::Policy'
    Condition: HasIAMUserSSHAccess
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: iam
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 'iam:ListUsers'
          Resource:
          - '*'
        - Effect: Allow
          Action:
          - 'iam:ListSSHPublicKeys'
          - 'iam:GetSSHPublicKey'
          Resource:
          - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  
  NATLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default:
            !If [HasIAMUserSSHAccess, [ssh-access, config], [config]]
        ssh-access:
          files:
            '/opt/authorized_keys_command.sh':
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                UnsaveUserName="$1"
                UnsaveUserName=${UnsaveUserName//".plus."/"+"}
                UnsaveUserName=${UnsaveUserName//".equal."/"="}
                UnsaveUserName=${UnsaveUserName//".comma."/","}
                UnsaveUserName=${UnsaveUserName//".at."/"@"}
                aws iam list-ssh-public-keys --user-name "$UnsaveUserName" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read -r KeyId; do
                  aws iam get-ssh-public-key --user-name "$UnsaveUserName" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            '/opt/import_users.sh':
              content: |
                #!/bin/bash -e
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  SaveUserName="$User"
                  SaveUserName=${SaveUserName//"+"/".plus."}
                  SaveUserName=${SaveUserName//"="/".equal."}
                  SaveUserName=${SaveUserName//","/".comma."}
                  SaveUserName=${SaveUserName//"@"/".at."}
                  if [ "${#SaveUserName}" -le "32" ]; then
                    if ! id -u "$SaveUserName" > /dev/null 2>&1; then
                      # don't grant sudo rights on bastion host!
                      /usr/sbin/useradd "$SaveUserName"
                    fi
                  else
                    echo "Can not import IAM user ${SaveUserName}. User name is longer than 32 characters."
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            '/etc/cron.d/import_users':
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
          commands:
            'a_configure_sshd_command':
              command: 'sed -e ''/AuthorizedKeysCommand / s/^#*/#/'' -i /etc/ssh/sshd_config; echo -e ''\nAuthorizedKeysCommand /opt/authorized_keys_command.sh'' >> /etc/ssh/sshd_config'
              test: '! grep -q ''^AuthorizedKeysCommand /opt/authorized_keys_command.sh'' /etc/ssh/sshd_config'
            'b_configure_sshd_commanduser':
              command: 'sed -e ''/AuthorizedKeysCommandUser / s/^#*/#/'' -i /etc/ssh/sshd_config; echo -e ''\nAuthorizedKeysCommandUser nobody'' >> /etc/ssh/sshd_config'
              test: '! grep -q ''^AuthorizedKeysCommandUser nobody'' /etc/ssh/sshd_config'
            'c_import_users':
              command: './import_users.sh'
              cwd: '/opt'
          services:
            sysvinit:
              sshd:
                enabled: true
                ensureRunning: true
                commands:
                - 'a_configure_sshd_command'
                - 'b_configure_sshd_commanduser'
        config:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${Logs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${Logs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${Logs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${Logs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${Logs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${Logs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${Logs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${Logs}
              mode: '000644'
              owner: root
              group: root
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.NATLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=NATLaunchConfiguration
                runas=root
          services:
            sysvinit:
              awslogs:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
    Properties:
      AssociatePublicIpAddress: true
      EbsOptimized: false
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', NATAMI]
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - !Ref SecurityGroup
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -x"
            - "\n"
            - 'yum update -y'
            - "\n"
            - 'yum -y install nano'
            - "\n"
            - !If
              - HasNewRelic
              - !Sub |
                  #!/bin/bash -x
                  # Create a configuration file and add your license key
                  echo "license_key: ${NewRelicLicenseKey}" | sudo tee -a /etc/newrelic-infra.yml
                  # Create the agent's yum repository
                  sudo curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64/newrelic-infra.repo
                  # Update your yum cache
                  sudo yum -q makecache -y --disablerepo='*' --enablerepo='newrelic-infra'
                  # Run the installation script
                  sudo yum install newrelic-infra -y
              - !Ref 'AWS::NoValue'
            - !Sub
              - |
                #!/bin/bash -x
                trap '/opt/aws/bin/cfn-signal -e 1 --region ${Region} --stack ${StackName} --resource AutoScalingGroup' ERR            
                INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIPAllocationId} && aws --region ${Region} ec2 modify-instance-attribute --instance-id $INSTANCEID --source-dest-check "{\"Value\": false}" && (aws --region ${Region} ec2 replace-route --route-table-id ${RouteTablePrivate} --destination-cidr-block "0.0.0.0/0" --instance-id $INSTANCEID || aws --region ${Region} ec2 create-route --route-table-id ${RouteTablePrivate} --destination-cidr-block "0.0.0.0/0" --instance-id $INSTANCEID) && /opt/aws/bin/cfn-init -v --stack ${StackName} --resource NATLaunchConfiguration --region ${Region}
                /opt/aws/bin/cfn-signal -e $? --region ${Region} --stack ${StackName} --resource AutoScalingGroup
              - RouteTablePrivate: {'Fn::ImportValue': !Sub '${ParentVPCStack}-RouteTablePrivate'}
                Region: !Ref 'AWS::Region'
                StackName: !Ref 'AWS::StackName'
                EIPAllocationId: !Sub '${EIP.AllocationId}'

  # Auto Scaling Group
  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref NATLaunchConfiguration
      MaxSize: !Ref AutoScaleMaxInstance
      MinSize: !Ref AutoScaleMinInstance
      Tags:
      - Key: ENV
        PropagateAtLaunch: true
        Value: !Ref ENV
      - Key: SYS
        PropagateAtLaunch: true
        Value: !Ref SYS
      - Key: Name
        Value: !Sub '${AWS::StackName}'
        PropagateAtLaunch: true
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      - []
      VPCZoneIdentifier: !Split [',', {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPublic'}]
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT15M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  
  # ASG Scheduled Action to Start Bastion host  
  AutoScalingGroupStartScheduleAction:
    Type: "AWS::AutoScaling::ScheduledAction"
    Condition: HasAutoScaleScheduleStart
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 1
      MaxSize: !Ref AutoScaleMaxInstance
      MinSize: !Ref AutoScaleMinInstance
      Recurrence: !Ref AutoScaleScheduleStart 
  
  # ASG Scheduled Action to Stop Bastion host  
  AutoScalingGroupStopScheduleAction:
    Type: "AWS::AutoScaling::ScheduledAction"
    Condition: HasAutoScaleScheduleStop
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DesiredCapacity: 0
      MaxSize: 0
      MinSize: 0
      Recurrence: !Ref AutoScaleScheduleStop 
      
  CPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref AutoScalingGroup
Outputs:
  TemplateID:
    Description: 'AWS Cloud Formation template id'
    Value: 'vpc-nat-instance'
  TemplateVersion:
    Description: 'AWS Cloud Formation template version.'
    Value: '1.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  SecurityGroup:
    Description: 'Use this Security Group to reference incoming traffic from the Nat Instance.'
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  IPAddress:
    Description: 'The public IP address of the Nat Instance.'
    Value: !Ref EIP
    Export:
      Name: !Sub '${AWS::StackName}-IPAddress'