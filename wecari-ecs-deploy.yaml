AWSTemplateFormatVersion: '2010-09-09'
Description: 'Continuous Delivery to ECS for Laravel Project using Rolling Deployment'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack 
      - ParentClusterStack 
      - ParentClusterServiceStack 
      - ParentAlertStack
    - Label:
        default: 'CodeBuild Parameters'
      Parameters:
      - CodeBuildDesc
      - CacheBucketName
      - AZA
      - AZB
      - SubnetsReach
      - AWSAccessKey
      - AWSAccessSecret 
      - AWSRegion
      - AppImageName
      - AppImageTag
      - AppENVFile  
    - Label:
        default: 'CodePipeline Parameters'
      Parameters:
      - ArtifactBucketName
      - SourceBucketName
      - SourceBucketKey
    - Label:
        default: 'Global Tags'
      Parameters:
      - ENV
      - SYS
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on wecari-vpc.yaml template.'
    Type: String
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on wecari-ecs.yaml template.'
    Type: String
  ParentClusterServiceStack:
    Description: 'Stack name of parent Cluster service stack based on wecari-ecs-service-laradock.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on wecari-alert.yaml template.'
    Type: String
    Default: ''

  CodeBuildDesc:
    Description: 'Description of the CodeBuild Project'
    Type: String 
    Default: 'Build Project to build Laravel project from S3 onto and ECR Image'
  CacheBucketName:
    Description: 'Name of S3 Bucket to use to cache Codebuild dependencies. Ignore if you prefer not to cache'
    Type: String 
    Default: ''
  AZA:
    Description: 'Use Availability Zone A (Choose at least one AZ)'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  AZB:
    Description: 'Use Availability Zone B (Choose at least one AZ)'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  SubnetsReach:
    Description: 'Should the code build container have access to the Internet ? If so, put it in a private subnet with NAT Gateway. If public, then no internet access'
    Type: String
    Default: Private
    AllowedValues:
    - Public
    - Private 
  AppImageName:
    Description: 'ECR Image Repo Name for App'
    Type: String
  AppImageTag:
    Description: 'ECR Image Repo Tag for App'
    Type: String 
    Default: 'latest'   
  AppENVFile:
    Description: 'Environment file to use when setting up Laravel Project. This env file will be copied into ".env" file. Use ".env.dev" for Development, ".env.prod" for Production'
    Type: String 
    Default: '.env.dev'
    AllowedValues:
    - '.env.dev'
    - '.env.prod'

  AWSAccessKey:
    Description: 'AWS Secret Manager reference for AWS Access Key for APP - with sufficient permissions like AWS Secret Manager, S3 etc. Format = secret-id:json-key:version-stage:version-id '
    Type: String 
  AWSAccessSecret:
    Description: 'AWS Secret Manager reference for AWS Access Secret APP - with sufficient permissions like AWS Secret Manager, S3 etc. Format = secret-id:json-key:version-stage:version-id '
    Type: String 
  AWSRegion:
    Description: 'Default AWS Region for APP'
    Type: String 
    Default: 'ap-southeast-1' 

  ArtifactBucketName:
    Description: 'Name of S3 Bucket to use to store Pipeline Artifacts'
    Type: String 
  SourceBucketName:
    Description: 'Name of S3 Bucket that holds the Source Codes. Note: This bucket must support Versioning'
    Type: String 
  SourceBucketKey:
    Description: 'Object name or path in S3 Bucket that holds Source Codes. Do not include (/) infront. e.g dev/Sample.zip or Sample.zip'
    Type: String 

  ENV:
    Description: 'Specify Environment to deploy Resource (dev,staging,prod)'
    Type: String
    Default: 'dev'
    AllowedValues:
    - 'dev'
    - 'staging'
    - 'prod'
  SYS:
    Description: 'Specify type System the resource is associated with this Resource (backend,frontend,both)'
    Type: String
    AllowedValues:
    - 'backend'
    - 'frontend'
    - 'both'
  
Conditions:
  HasCacheBucketName: !Not [!Equals [!Ref CacheBucketName, '']]
  HasAZA: !Equals [!Ref AZA, 'true']
  HasAZB: !Equals [!Ref AZB, 'true']
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]

Resources:

  # Codebuild Role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 's3:*'
                - 'ecr:*'
                - 'secretsmanager:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'

  # Codebuild Project
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Ref 'AWS::StackName'
      Description: !Ref CodeBuildDesc
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: !Sub | 
          version: 0.2
          install:
            runtime-versions:
              docker: 18
              php: 7.3
          phases:
            pre_build:
              commands:
                - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
                - AppImageUrl=$AWS_ACCOUNT_ID.dkr.ecr.$AWSRegion.amazonaws.com/$AppImageName

                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWSRegion | docker login --username AWS --password-stdin $AppImageUrl

            build:
              commands:
                - echo Build started on `date` 
                
                - echo Installing composer..
                - composer install

                - echo Creating and updating .env file..
                - cp $AppENVFile .env

                - php artisan env:set AWS_ACCESS_KEY_ID=$AWSAccessKey -q
                - php artisan env:set AWS_SECRET_ACCESS_KEY=$AWSAccessSecret -q
                - php artisan env:set AWS_DEFAULT_REGION=$AWSRegion -q

                - echo Building the Docker image...          
                - docker build -t $AppImageUrl:$AppImageTag .
                - docker tag $AppImageUrl:$AppImageTag $AppImageUrl:$IMAGE_TAG

            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AppImageUrl:$AppImageTag
                - docker push $AppImageUrl:$IMAGE_TAG
                - printf '[{"name":"%s", "imageUri":"%s"}]' $AppImageName $AppImageUrl:$IMAGE_TAG > imagedefinitions.json

          artifacts:
            files:
              - imagedefinitions.json
          cache:
            paths:
              - 'vendor/**/*'

        InsecureSsl: false
      SecondarySources: []
      SecondarySourceVersions: []
      Artifacts:
        Type: CODEPIPELINE
      SecondaryArtifacts: []
      Cache:
        Type: !If [HasCacheBucketName, 'S3', 'NO_CACHE']
        Location: !If [HasCacheBucketName, !Sub '${CacheBucketName}/${AWS::StackName}', !Ref 'AWS::NoValue']
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:4.0
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
        - Name: AWS_ACCOUNT_ID
          Value: !Ref 'AWS::AccountId'
          Type: PLAINTEXT
        - Name: AppImageName
          Value: !Ref AppImageName
          Type: PLAINTEXT
        - Name: AppImageTag
          Value: !Ref AppImageTag
          Type: PLAINTEXT
        - Name: AppENVFile
          Value: !Ref AppENVFile
          Type: PLAINTEXT  
        - Name: AWSAccessKey
          Value: !Ref AWSAccessKey
          Type: SECRETS_MANAGER
        - Name: AWSAccessSecret
          Value: !Ref AWSAccessSecret
          Type: SECRETS_MANAGER
        - Name: AWSRegion
          Value: !Ref AWSRegion
          Type: PLAINTEXT
        PrivilegedMode: true
        ImagePullCredentialsType: CODEBUILD
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 30
      QueuedTimeoutInMinutes: 60
      Tags:
      - Key: ENV
        Value: !Ref ENV
      - Key: SYS
        Value: !Ref SYS
      VpcConfig:
        VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
        Subnets: 
        - !If [HasAZA, {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetA${SubnetsReach}'}, !Ref 'AWS::NoValue']
        - !If [HasAZB, {'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetB${SubnetsReach}'}, !Ref 'AWS::NoValue']
        SecurityGroupIds:
        - {'Fn::ImportValue': !Sub '${ParentVPCStack}-SecurityGroup'}
      BadgeEnabled: false
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: aws-codebuild
          StreamName: !Sub '${AWS::StackName}'
        S3Logs:
          Status: DISABLED
          EncryptionDisabled: false

  
  # CodePipeline Role
  CodePipelineRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
          Version: '2012-10-17'
        Path: /
        Policies:
          - PolicyName: CodePipelineAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Action: 
                  - 'logs:*'
                  - 's3:*'
                  - 'events:*'
                  - 'codestar:*'
                  - 'kms:*'
                  - 'ecs:*'
                  - 'sns:*'
                  - 'cloudwatch:*'
                  - 'codebuild:*'
                  - 'codedeploy:*' 
                  Resource: "*"
                  Effect: Allow
                - Action:
                  - 'iam:PassRole' 
                  Resource: "*"
                  Effect: Allow

  # CodePipeline              
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt 'CodePipelineRole.Arn'
      ArtifactStore:
        Type: S3
        Location: !Sub '${ArtifactBucketName}'
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          Region: !Ref 'AWS::Region'
          ActionTypeId:
            Category: Source
            Owner: AWS
            Provider: S3
            Version: '1'
          RunOrder: 1
          Configuration:
            PollForSourceChanges: true
            S3Bucket: !Ref SourceBucketName
            S3ObjectKey: !Ref SourceBucketKey
          InputArtifacts: []
          OutputArtifacts:
          - Name: SourceArtifact
          Namespace: SourceVariables
      - Name: Build
        Actions:
        - Name: Build
          Region: !Ref 'AWS::Region'
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          RunOrder: 1
          Configuration:
            ProjectName: !Ref   CodeBuildProject
          InputArtifacts:
          - Name: SourceArtifact
          OutputArtifacts:
          - Name: BuildArtifact
          Namespace: BuildVariables
      - Name: Deploy
        Actions:
        - Name: Deploy
          Region: !Ref 'AWS::Region'
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: ECS
            Version: '1'
          RunOrder: 1
          Configuration: 
            ClusterName: {'Fn::ImportValue': !Sub '${ParentClusterStack}-Cluster'}
            ServiceName: {'Fn::ImportValue': !Sub '${ParentClusterServiceStack}-Service'}
            FileName: 'imagedefinitions.json'
          InputArtifacts:
          - Name: BuildArtifact 
          Namespace: DeployVariables

  # Code Pipeline Notification Rule
  CodepipelinedNotificationRule:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Condition: HasAlertTopic
    Properties:
      Name: !Sub ${CodePipeline}-Notification-Rule
      DetailType: FULL
      Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
      EventTypeIds: 
      - codepipeline-pipeline-stage-execution-failed
      - codepipeline-pipeline-pipeline-execution-succeeded
      Targets: 
      - TargetType: SNS 
        TargetAddress: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
        
Outputs:
  TemplateID:
    Description: 'Wecari template id'
    Value: 'ecs-bg-deploy'
  TemplateVersion:
    Description: 'Wecari template version.'
    Value: '1.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'

  CodeBuildProject:
    Description: 'Name of CodeBuild Project'
    Value: !Ref CodeBuildProject
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProject'
  CodeBuildProjectArn:
    Description: 'ARN for CodeBuild Project'
    Value: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${CodeBuildProject}"
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildProjectArn'
 
  CodePipeline:
    Description: 'Name of CodePipeline'
    Value: !Ref CodePipeline
    Export:
      Name: !Sub '${AWS::StackName}-CodePipeline'
  CodePipelineArn:
    Description: 'ARN for CodePipeline'
    Value: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
    Export:
      Name: !Sub '${AWS::StackName}-CodePipelineArn'